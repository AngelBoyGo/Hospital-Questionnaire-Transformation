/**
 * Professional Word Document Generator for Hospital Technical Specifications
 * Converts JSON transformation results into professional Word documents
 */

const { Document, Packer, Paragraph, TextRun, HeadingLevel, Table, TableRow, TableCell, WidthType, AlignmentType, BorderStyle } = require('docx');
const fs = require('fs').promises;
const path = require('path');

class WordGenerator {
  constructor() {
    this.outputPath = path.join(__dirname, '..', '..', 'generated_documents');
    this.initialized = false;
  }

  async initialize() {
    try {
      // Ensure output directory exists
      await fs.mkdir(this.outputPath, { recursive: true });
      this.initialized = true;
      console.log('Word Generator initialized successfully');
    } catch (error) {
      console.error('Failed to initialize Word Generator:', error);
      throw error;
    }
  }

  /**
   * Generate Executive Summary Word Document
   */
  async generateExecutiveSummary(transformationResult, options = {}) {
    if (!this.initialized) await this.initialize();

    const { executiveSummary } = transformationResult;
    const hospitalName = executiveSummary?.hospitalName || 'Hospital';
    const hospitalType = executiveSummary?.hospitalType || 'Community Hospital';
    const bedCount = executiveSummary?.bedCount || 0;

    const doc = new Document({
      sections: [{
        properties: {},
        children: [
          // Title
          new Paragraph({
            children: [
              new TextRun({
                text: "Executive Summary",
                bold: true,
                size: 32,
                color: "2E86AB"
              })
            ],
            heading: HeadingLevel.TITLE,
            alignment: AlignmentType.CENTER,
            spacing: { after: 400 }
          }),

          // Hospital Overview
          new Paragraph({
            children: [
              new TextRun({
                text: hospitalName,
                bold: true,
                size: 28,
                color: "2E86AB"
              })
            ],
            heading: HeadingLevel.HEADING_1,
            spacing: { before: 400, after: 200 }
          }),

          new Paragraph({
            children: [
              new TextRun({
                text: `${hospitalType} ‚Ä¢ ${bedCount} Beds`,
                size: 20,
                italics: true
              })
            ],
            spacing: { after: 300 }
          }),

          new Paragraph({
            children: [
              new TextRun({
                text: `Generated: ${new Date().toLocaleDateString()}`,
                size: 16
              })
            ],
            spacing: { after: 400 }
          }),

          // Key Metrics Table
          new Paragraph({
            children: [
              new TextRun({
                text: "Key Metrics",
                bold: true,
                size: 24,
                color: "2E86AB"
              })
            ],
            heading: HeadingLevel.HEADING_2,
            spacing: { before: 400, after: 200 }
          }),

          this.createMetricsTable(executiveSummary),

          // Recommendations
          new Paragraph({
            children: [
              new TextRun({
                text: "üéØ Key Recommendations",
                bold: true,
                size: 20,
                color: "F18F01"
              })
            ],
            heading: HeadingLevel.HEADING_3,
            spacing: { before: 400, after: 200 }
          }),

          ...this.createRecommendationsList(executiveSummary?.keyRecommendations),

          // Competitive Advantages
          new Paragraph({
            children: [
              new TextRun({
                text: "üöÄ Metis Transformation Engine‚Ñ¢ Advantages",
                bold: true,
                size: 20,
                color: "28a745"
              })
            ],
            heading: HeadingLevel.HEADING_3,
            spacing: { before: 400, after: 200 }
          }),

          ...this.createAdvantagesList(executiveSummary?.competitiveAdvantages),

          // Footer
          new Paragraph({
            children: [
              new TextRun({
                text: "Generated by Metis Transformation Engine‚Ñ¢ | Patent-Protected Technology",
                size: 16,
                italics: true,
                color: "666666"
              })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 600 }
          }),

          new Paragraph({
            children: [
              new TextRun({
                text: `Transformation ID: ${transformationResult.transformationId}`,
                size: 14,
                color: "666666"
              })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 100 }
          })
        ]
      }]
    });

    const filename = `executive-summary-${transformationResult.transformationId}.docx`;
    return await this.saveDocument(doc, filename);
  }

  /**
   * Generate Technical Specification Word Document
   */
  async generateTechnicalSpecification(transformationResult, options = {}) {
    if (!this.initialized) await this.initialize();

    const { specification, executiveSummary } = transformationResult;
    const hospitalName = executiveSummary?.hospitalName || 'Hospital';

    const doc = new Document({
      sections: [{
        properties: {},
        children: [
          // Title
          new Paragraph({
            children: [
              new TextRun({
                text: "Technical Specification",
                bold: true,
                size: 32,
                color: "2E86AB"
              })
            ],
            heading: HeadingLevel.TITLE,
            alignment: AlignmentType.CENTER,
            spacing: { after: 400 }
          }),

          new Paragraph({
            children: [
              new TextRun({
                text: `${hospitalName} - Implementation Details`,
                bold: true,
                size: 20
              })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 600 }
          }),

          // Infrastructure Requirements
          new Paragraph({
            children: [
              new TextRun({
                text: "üñ•Ô∏è Infrastructure Requirements",
                bold: true,
                size: 24,
                color: "2E86AB"
              })
            ],
            heading: HeadingLevel.HEADING_1,
            spacing: { before: 400, after: 200 }
          }),

          this.createInfrastructureTable(specification?.infrastructure),

          // Integration Requirements
          new Paragraph({
            children: [
              new TextRun({
                text: "üîó Integration Requirements",
                bold: true,
                size: 24,
                color: "2E86AB"
              })
            ],
            heading: HeadingLevel.HEADING_1,
            spacing: { before: 400, after: 200 }
          }),

          new Paragraph({
            children: [
              new TextRun({
                text: `Primary EHR: ${specification?.integration?.emr_integration?.system || 'TBD'}`,
                size: 16
              })
            ],
            spacing: { after: 100 }
          }),

          new Paragraph({
            children: [
              new TextRun({
                text: `Interface Engine: ${specification?.integration?.interface_engine || 'TBD'}`,
                size: 16
              })
            ],
            spacing: { after: 100 }
          }),

          // Security & Compliance
          new Paragraph({
            children: [
              new TextRun({
                text: "üîí Security & Compliance",
                bold: true,
                size: 24,
                color: "2E86AB"
              })
            ],
            heading: HeadingLevel.HEADING_1,
            spacing: { before: 400, after: 200 }
          }),

          ...this.createComplianceList(),

          // Cost Breakdown
          new Paragraph({
            children: [
              new TextRun({
                text: "üìä Cost Breakdown",
                bold: true,
                size: 24,
                color: "2E86AB"
              })
            ],
            heading: HeadingLevel.HEADING_1,
            spacing: { before: 400, after: 200 }
          }),

          this.createCostTable(specification, executiveSummary),

          // Footer
          new Paragraph({
            children: [
              new TextRun({
                text: "Generated by Metis Transformation Engine‚Ñ¢ | Patent-Protected Technology",
                size: 16,
                italics: true,
                color: "666666"
              })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 600 }
          })
        ]
      }]
    });

    const filename = `technical-specification-${transformationResult.transformationId}.docx`;
    return await this.saveDocument(doc, filename);
  }

  /**
   * Generate Complete Report Word Document
   */
  async generateCompleteReport(transformationResult, options = {}) {
    if (!this.initialized) await this.initialize();

    const { executiveSummary } = transformationResult;
    const hospitalName = executiveSummary?.hospitalName || 'Hospital';

    const doc = new Document({
      sections: [
        // Cover Page
        {
          properties: {},
          children: [
            new Paragraph({
              children: [
                new TextRun({
                  text: hospitalName,
                  bold: true,
                  size: 48,
                  color: "2E86AB"
                })
              ],
              alignment: AlignmentType.CENTER,
              spacing: { before: 2000, after: 400 }
            }),

            new Paragraph({
              children: [
                new TextRun({
                  text: "Healthcare IT Transformation Report",
                  bold: true,
                  size: 28,
                  color: "A23B72"
                })
              ],
              alignment: AlignmentType.CENTER,
              spacing: { after: 400 }
            }),

            new Paragraph({
              children: [
                new TextRun({
                  text: "Complete Technical Specification & Implementation Plan",
                  size: 20,
                  italics: true
                })
              ],
              alignment: AlignmentType.CENTER,
              spacing: { after: 800 }
            }),

            new Paragraph({
              children: [
                new TextRun({
                  text: "Generated by Metis Transformation Engine‚Ñ¢",
                  size: 18,
                  bold: true
                })
              ],
              alignment: AlignmentType.CENTER,
              spacing: { after: 200 }
            }),

            new Paragraph({
              children: [
                new TextRun({
                  text: new Date().toLocaleDateString(),
                  size: 16
                })
              ],
              alignment: AlignmentType.CENTER
            })
          ]
        },

        // Executive Summary Section
        {
          properties: {},
          children: [
            new Paragraph({
              children: [
                new TextRun({
                  text: "Executive Summary",
                  bold: true,
                  size: 32,
                  color: "2E86AB"
                })
              ],
              heading: HeadingLevel.HEADING_1,
              alignment: AlignmentType.CENTER,
              spacing: { after: 400 }
            }),

            // Add executive summary content here
            ...this.createExecutiveSummaryContent(transformationResult)
          ]
        },

        // Technical Specification Section
        {
          properties: {},
          children: [
            new Paragraph({
              children: [
                new TextRun({
                  text: "Technical Specification",
                  bold: true,
                  size: 32,
                  color: "2E86AB"
                })
              ],
              heading: HeadingLevel.HEADING_1,
              alignment: AlignmentType.CENTER,
              spacing: { after: 400 }
            }),

            // Add technical specification content here
            ...this.createTechnicalSpecContent(transformationResult)
          ]
        }
      ]
    });

    const filename = `complete-report-${transformationResult.transformationId}.docx`;
    return await this.saveDocument(doc, filename);
  }

  /**
   * Create metrics table
   */
  createMetricsTable(executiveSummary) {
    return new Table({
      width: { size: 100, type: WidthType.PERCENTAGE },
      rows: [
        new TableRow({
          children: [
            new TableCell({
              children: [new Paragraph({ children: [new TextRun({ text: "Metric", bold: true })] })],
              width: { size: 50, type: WidthType.PERCENTAGE }
            }),
            new TableCell({
              children: [new Paragraph({ children: [new TextRun({ text: "Value", bold: true })] })],
              width: { size: 50, type: WidthType.PERCENTAGE }
            })
          ]
        }),
        new TableRow({
          children: [
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: "Estimated Investment" })] })] }),
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: this.formatCurrency(executiveSummary?.estimatedCost || 0) })] })] })
          ]
        }),
        new TableRow({
          children: [
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: "Implementation Timeline" })] })] }),
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: executiveSummary?.estimatedTimeline || 'TBD' })] })] })
          ]
        }),
        new TableRow({
          children: [
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: "Risk Level" })] })] }),
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: executiveSummary?.riskLevel || 'Medium' })] })] })
          ]
        })
      ]
    });
  }

  /**
   * Create infrastructure table
   */
  createInfrastructureTable(infrastructure) {
    const compute = infrastructure?.compute_requirements || {};
    const storage = infrastructure?.storage_requirements || {};

    return new Table({
      width: { size: 100, type: WidthType.PERCENTAGE },
      rows: [
        new TableRow({
          children: [
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: "Component", bold: true })] })] }),
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: "Specification", bold: true })] })] })
          ]
        }),
        new TableRow({
          children: [
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: "Application Servers" })] })] }),
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: `${compute.application_servers || 'TBD'} servers` })] })] })
          ]
        }),
        new TableRow({
          children: [
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: "Total CPU Cores" })] })] }),
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: `${compute.total_cpu_cores || 'TBD'} cores` })] })] })
          ]
        }),
        new TableRow({
          children: [
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: "Total Memory" })] })] }),
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: `${compute.total_memory_gb || 'TBD'} GB RAM` })] })] })
          ]
        }),
        new TableRow({
          children: [
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: "Primary Storage" })] })] }),
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: `${storage.primary_storage_gb || 'TBD'} GB` })] })] })
          ]
        })
      ]
    });
  }

  /**
   * Create cost table
   */
  createCostTable(specification, executiveSummary) {
    const compute = specification?.infrastructure?.compute_requirements || {};
    const storage = specification?.infrastructure?.storage_requirements || {};

    return new Table({
      width: { size: 100, type: WidthType.PERCENTAGE },
      rows: [
        new TableRow({
          children: [
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: "Cost Category", bold: true })] })] }),
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: "Amount", bold: true })] })] })
          ]
        }),
        new TableRow({
          children: [
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: "Infrastructure Cost" })] })] }),
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: this.formatCurrency(compute.estimated_cost || 0) })] })] })
          ]
        }),
        new TableRow({
          children: [
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: "Storage Cost" })] })] }),
            new TableCell({ children: [new Paragraph({ children: [new TextRun({ text: this.formatCurrency(storage.estimated_cost || 0) })] })] })
          ]
        }),
        new TableRow({
          children: [
            new TableCell({ 
              children: [new Paragraph({ children: [new TextRun({ text: "Total Estimated Cost", bold: true })] })],
              shading: { fill: "f8f9fa" }
            }),
            new TableCell({ 
              children: [new Paragraph({ children: [new TextRun({ text: this.formatCurrency(executiveSummary?.estimatedCost || 0), bold: true })] })],
              shading: { fill: "f8f9fa" }
            })
          ]
        })
      ]
    });
  }

  /**
   * Create recommendations list
   */
  createRecommendationsList(recommendations) {
    const recs = recommendations || ['Standard implementation approach recommended'];
    return recs.map(rec => 
      new Paragraph({
        children: [
          new TextRun({ text: `‚Ä¢ ${rec}`, size: 16 })
        ],
        spacing: { after: 100 }
      })
    );
  }

  /**
   * Create advantages list
   */
  createAdvantagesList(advantages) {
    const defaultAdvantages = {
      speedImprovement: '95% faster than manual processes',
      accuracyImprovement: '87% more accurate than traditional methods',
      costSavings: '89% cost savings vs consulting firms'
    };
    
    const advs = advantages || defaultAdvantages;
    
    return [
      new Paragraph({
        children: [new TextRun({ text: `‚Ä¢ Speed: ${advs.speedImprovement}`, size: 16 })],
        spacing: { after: 100 }
      }),
      new Paragraph({
        children: [new TextRun({ text: `‚Ä¢ Accuracy: ${advs.accuracyImprovement}`, size: 16 })],
        spacing: { after: 100 }
      }),
      new Paragraph({
        children: [new TextRun({ text: `‚Ä¢ Cost Savings: ${advs.costSavings}`, size: 16 })],
        spacing: { after: 100 }
      })
    ];
  }

  /**
   * Create compliance list
   */
  createComplianceList() {
    return [
      new Paragraph({
        children: [new TextRun({ text: "‚Ä¢ End-to-end encryption for all data transmission", size: 16 })],
        spacing: { after: 100 }
      }),
      new Paragraph({
        children: [new TextRun({ text: "‚Ä¢ Role-based access control (RBAC)", size: 16 })],
        spacing: { after: 100 }
      }),
      new Paragraph({
        children: [new TextRun({ text: "‚Ä¢ Comprehensive audit logging", size: 16 })],
        spacing: { after: 100 }
      }),
      new Paragraph({
        children: [new TextRun({ text: "‚Ä¢ Regular security assessments", size: 16 })],
        spacing: { after: 100 }
      }),
      new Paragraph({
        children: [new TextRun({ text: "‚Ä¢ HIPAA, HITECH, and SOC 2 compliance", size: 16 })],
        spacing: { after: 100 }
      })
    ];
  }

  /**
   * Create executive summary content for complete report
   */
  createExecutiveSummaryContent(transformationResult) {
    const { executiveSummary } = transformationResult;
    return [
      new Paragraph({
        children: [
          new TextRun({
            text: `${executiveSummary?.hospitalName || 'Hospital'} Overview`,
            bold: true,
            size: 20,
            color: "2E86AB"
          })
        ],
        spacing: { before: 200, after: 200 }
      }),
      new Paragraph({
        children: [
          new TextRun({
            text: `This ${executiveSummary?.hospitalType || 'hospital'} with ${executiveSummary?.bedCount || 'TBD'} beds requires a comprehensive IT transformation to modernize its healthcare delivery capabilities.`,
            size: 16
          })
        ],
        spacing: { after: 300 }
      }),
      this.createMetricsTable(executiveSummary)
    ];
  }

  /**
   * Create technical specification content for complete report
   */
  createTechnicalSpecContent(transformationResult) {
    const { specification } = transformationResult;
    return [
      new Paragraph({
        children: [
          new TextRun({
            text: "Infrastructure Overview",
            bold: true,
            size: 20,
            color: "2E86AB"
          })
        ],
        spacing: { before: 200, after: 200 }
      }),
      this.createInfrastructureTable(specification?.infrastructure)
    ];
  }

  /**
   * Save document to file
   */
  async saveDocument(doc, filename) {
    try {
      const buffer = await Packer.toBuffer(doc);
      const filePath = path.join(this.outputPath, filename);
      await fs.writeFile(filePath, buffer);

      return {
        success: true,
        filename,
        path: filePath,
        buffer,
        size: buffer.length
      };
    } catch (error) {
      console.error('Failed to save Word document:', error);
      throw new Error(`Word document generation failed: ${error.message}`);
    }
  }

  /**
   * Format currency values
   */
  formatCurrency(amount) {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  }
}

module.exports = WordGenerator;